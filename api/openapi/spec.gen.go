// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUTW/bOBD9K8TsHrWinCz2oNN612nhImiDJj0FRsFQY4uB+FGStmMY+u/FUHIsfwRw",
	"0EMvlqx5M/P43gy3IK121qCJAcotBFmjFun1YY0Y6cV569BHhemzquh3br0WEUpQJv7zN2QQNw67v7hA",
	"D20GEV9Seh8J0SuzoMAyoP9+YZk2A48/lspjBeUjNZ+9guzTM8pIFb8F9L/A1AiNZ5he0ptA+BLRG9FM",
	"rEx9KwzSKxeVNVDCB2Uqpq1Hpszcsho9QgZL30AJdYwulJzji9CuwVxaTXwISIWkNVHIJCJqoSgjLJ2z",
	"Pv47zNgdAMZ3U9YDDlqUnK/X63yQw3ewNjuiO2ahtj6ywVdm52x8N80hg0ZJNCGJtevphKyRXeXFuZYi",
	"RXPrF7xPDfx2+v/N5/ubv67yIq+jbrpZ8Tp8md+jXymJ+xpDygnDyUAVG8LcpxhRgwxW6EN3glFe5AUV",
	"tQ6NcApKuM6L/BoycCLWySIeabgD36bntGrp46Ib90M9vmJcehOYYEGZRYMsrQXTtsIGUg8vCDqtoISP",
	"GFP4v810ktp5oTGiD1A+HhdOnZmqgPyGMnHbW9nzguEIRr/ErN/Qwbjud2VG6OAsyUyAq6LYjRGadDbh",
	"XKNkIsyfA/HYDgr2au92Z7TbYfhka8MmNg3ubnlHNKgRder0p8c5lPAH398mvL9KeHePtGdX52T2TjUm",
	"WFhqLfymU5h1yj1t2HRCMxnFgvTtJAswowRONAPf0uNd7tJN8ra5FL3EW2r7prUdp9/tbE/m1dlL3UxX",
	"7bvMHEh66mVS6sTK5B45SXj0q/Mq31opGtbFjy+fhmK1DbG8LoqCr0ZAGvb1jwuNpcQQWLSJazi0KkCb",
	"vZ3w0A3d4d4GaGftzwAAAP//JaOBVVoHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

