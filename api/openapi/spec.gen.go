// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
