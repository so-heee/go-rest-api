// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUTW/bOBD9K8TsHrWikix60KlunRYugjZo0lNgBAw1tphKJEtScQxD/70YSorljwAO",
	"eujFkjVvZh7fm+EGpKmt0aiDh3wDXpZYi/h6u0IM9GKdseiCwvhZFfS7MK4WAXJQOrz7HxIIa4vdX1yi",
	"gzaBgM8xvY/44JReUqDx6O5PLNMm4PBXoxwWkN9R8/kLyDw8ogxU8YdH9wdMtajxCNNTehMInwM6Laqp",
	"kbFvgV46ZYMyGnL4pHTBauOQKb0wrESHkEDjKsihDMH6nHN8FrWtMJWmJj4EpELS6CBkFBFroSjDN9Ya",
	"F96PM4YDwOR6xnrATouc89VqlY5y+ABrkz26E+ZL4wIbfWVmwSbXsxQSqJRE7aNYQ08rZInsPM2OtRQx",
	"mhq35H2q51ezj5dfby7/O0+ztAx11c2Kq/23xQ26JyVxW2NMOWI4GahCRZibGCNqkMATOt+d4CzN0oyK",
	"GotaWAU5XKRZegEJWBHKaBEPNNyeb+JzVrT0cdmN+64e3zE0TnsmmFd6WSGLa8FqU2AFsYcTBJ0VkMNn",
	"DDH8YT2bxnZO1BjQecjv9gvHzkwVQH5DHrltrex5wXgEg2sw6Td0NK7bXZkT2ltDMhPgPMuGMUIdzyas",
	"rZSMhPmjJx6bUcFe7WF3zoYdhi+m1Gxq4uAOy3tGgxqwjp3+dbiAHP7h29uE91cJ7+6R9ujqHMzeocYE",
	"801dC7fuFGadcg9rNpvSTAaxJH07yTzMKYETTc839HiTu3STvG4uRU/xltq+am3H6W8725N5cfZUN+NV",
	"+yYzR5IeehmVOrAyukdOEh5l41RYR5mFVfc/kd7nbbLpcPeiCSVlrZwKmHe5pJco8qHQnOq4p+NuXRkp",
	"KtbF9y+ximKl8SG/yLIMqFBPcr/KREr0ngUTD+x3/fZAdF9LuO0md3f5PbTz9ncAAAD//3LsoKifBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

