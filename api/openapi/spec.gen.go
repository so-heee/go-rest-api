// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVTXPbNhD9Kxi0R4ag7U4PPFWOk4zSTJOJ7ekho8nA4EpESgLMYilZ4+F/7yxIWZRE",
	"N05zyImWsR8P7+0+PEjj68Y7cBRk/iCDKaHW8c9ZSyU4skaT9e4jfG0hEB806BtAshDDnK6Bv7RtQOYy",
	"EFq3kl0iGx3CxmMxcdglEuFraxEKmX/qS4wSFskuwd99AUNc7RhNaLwLcAqH/D/gvt2yD5tqdLMBmLim",
	"jfdYeqw1yVxaR7//Jh/TrSNYAXI+wT1N8tEGwM/PLHOE1k5zchsAfwDpE8o9p3eXyACmRUvba56YvvMl",
	"aARkpfjXXfz1eofj7d83Munniyv1p3tcJVEjOy4M9wTodHXlTaxaQDBoG5Zd5vK1dYWoPYKwbulFCcij",
	"02I11Ai5UnCv66aC1Pia78mBXMh4R9pEcaDWljNC2zQe6Y9xxo4YOfswF0PAQYtcqc1mk45y1C6sS47g",
	"zkQoPZIY/Vf4pZh9mKcykZU1MEzxrmejTQniPM2mWup4mnpcqSE1qHfzl6/+un714jzN0pLqqp9BrMP7",
	"5TXg2hrY1xhDjjGKBbBUccx1PGNoMpFrwNDf4CzN0oyL+gacbqzM5UWapRdxYamMEimvWyqVNgZC+Py4",
	"go3vDeOQktsAhSAvEAgtrEHoqhKkcQUkAqxqtiKx9CgMIGnrhDbGt46ELZgzHvXoAfOC+drbAs8B9i51",
	"6YvtTnFwEUPdVmQbjaR4M14UmvTe7/ivXxGWMpe/qL0hqsEN1bQVdl2/K70VRSLOs+yor26aashTX4J3",
	"/7/p4Hix6SGj7//sN7Kta43bI1bExlIpqAShi9o6EQDXgMwk6VXgDTeVZbALrqGI7S+oh/idFx2jXMGE",
	"jB+BWnRBaBGsW1UgonGK2hdQncj0BigeX27nV3FwUNdAgNz/uHDsLGwheXNlHqdsv5QDLjk2KcIWkhGr",
	"J266+EGZhr3ZuevZzuXlW186ceWjBe3s/Ywth6AO3xK4f2m6U3OdcpFTjg8lfwMkeubutmJ+Nda3l3TQ",
	"l2EG9cCf71KX35qnxeXT52jLbZ+Utsf0s5UdwDwq+1w142P8XWKOKB0/qJG28VP6acHXPJQ6EnmidBSX",
	"hY7leM+nRHjnja4GHzh+ZSo+K32g/CLLMrU+k9x7qH9c6GVvHI+cDUbSJceBs/gwsOnfRoQHkof/TLjp",
	"h/dw/4PsFt2/AQAA//9zf6EUuwoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

