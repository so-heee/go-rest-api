// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
