// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWTW/bOBD9KwR3j67kJIs96FSnSQp3izbIB/ZQBAVDjS1mJVIdjuIYgf77YigplmW5",
	"ddpDT7JMcmb43rw3epbaFaWzYMnL5Fl6nUGhws9ZRRlYMlqRcfYKvlXgiRdKdCUgGQjbrCqAn7QuQSbS",
	"Exq7lPVElsr7lcN0ZLGeSIRvlUFIZfKlCdE7cDfpDrj7B9DE0YbV+NJZD7vlKK3B+6/k/gP748xbu8fS",
	"3qwARi5twq0WDgtFMpHG0t9/yZfjxhIsAfk8wRONolN5wK8HhhkUbcYRuvWAv1BpoUw+Wukegg8v6tJ5",
	"2ts+r037E30VUny3veqJ9KArNLS+ZgE0pZ2CQkBuPH67D28XHZAf/r2Rk0YuHKlZ3QCbEZWy5sDwRIBW",
	"5WdOh6gpeI2m5C6WibwwNhWFQxDGLpzIALniCvM2hk/iGJ5UUeYQaVfw/XkjB9LOktIBUmhQlL4qS4f0",
	"tn+iQ1LOLuei3bCVIonj1WoV9c7E3bZ6Mih3JnzmkETvX+EWYnY5j+RE5kZDK8ouZ6l0BuI4mo6lVGE1",
	"criM26M+/jh/d/7p+vzNcTSNMiryRkRY+M+La8BHo2ETo19y2BMzAYZy3nMd1rg0OZGPgL65wVE0jaYc",
	"1JVgVWlkIk+iaXQSGoSyQFHsVEVZPLSS0jUNvA3JrYdUkBMIhAYeQag8F6RwCSQ8LAt2VrFwKDQgKWOF",
	"0tpVloRJGTPWQrC0ecp4bVyO+wAb1Zy6dN0xDjbUUFQ5mVIhxSztN6kitbFv/vUnwkIm8o944+9xa+7x",
	"uLPXdaOfxlkDEMfT6SCvKsu8PRc/eGd/Pmlr4CHpNqKf/2kUWRWFwvUAFbEylAnKQKi0MFZ4wEdARpLU",
	"0rPqdW642DuOERP7t4+fw3Oe1lzlEkZovAKq0HqhhDd2mYMIzi8Kl0K+Q9N7oLB8up6fhcZBVQABcv5h",
	"4JBZmFSycmUSumwjyrYu2TcuwgomPVR3xsHdL9LU6qYbD0fdmJIfXGbFmQsW1M2nI7YcgsL/iOBmVNa7",
	"5jrmIrsYb1P+Hkg0yN2vxfysz29Dacsvl+n3i/MdAveMEhZWIgzIIZU8nNqF/Wobg7MHYuu+Dy6zb5f8",
	"sm28PVQ3s0vS9afLY1VcMGKHKWg4S0eQZTjYjHS4t9zV89EIRlfns5vzswEBY8h1DDSg9wiIn/nxKnlx",
	"yP3q4tVDxBXuu09bTU2/VVonL8VcGZ0pTMWVC7QcpKgA+6sE1UO1/1ETkOt/zny545tuyy1guaO2F65D",
	"OPbaMR4+Oq3y1ouHkz7ntcx5Sk6m02n8eCQ5dxt/pxkb836BrTXzejLcOAvDmXv9NlS4xbr/7oGbxkC2",
	"PdjL+q7+PwAA//8P13xrDg0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

