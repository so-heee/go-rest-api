// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUQW/zNgz9KwK3o2c57bCDT0uXdkhRbMXSYYciGFSZiVXYkibJSYPA/32gbDdOmgIp",
	"vsN3SWyTenx6j+QepKmt0aiDh3wPXpZYi/j4tEUM9GCdseiCwvhZFfS7Mq4WAXJQOvzyMyQQdha7V1yj",
	"gzaBgG/xeB/xwSm9pkDj0f17IUybgMP/GuWwgPyZii/fk8zLK8pAiH97dN/AVIsazzC9pHabgEfZOBV2",
	"C5Kuq3yDwqGbNqGkt5f4djfwuP/nCZJOaELqogdeZQgWWgLGt4BOi2pmZEQt0EunbFBGQw53ShesNg6Z",
	"0ivDSnQICTSu6jF8zjm+idpWmEpT0z0pkYCk0UHIaA7WQtEJ31hrXPh1fGIQBqaPc9YnHJXIOd9ut+no",
	"DB/S2uSE7pT50rjARl+ZWbHp4zyFBColUftowlDTClkiu0qzcyVFjKbGrXl/1POH+W+3fyxuf7pKs7QM",
	"ddX1oKv9n6sFuo2SeMAYU445nAxQoaKcRYwRNUhgg853N5ikWZoRqLGohVWQw3WapdeQgBWhjBbxQEPj",
	"+T7+z4uWPq67MTrW4y8MjdOeCeaVXlfI4rix2hRYQazhBKXOC8jhdwwxfLObz2I5J2oM6Dzkz6fAsTJT",
	"BZDfkEduByt7XjBu7eAa7BtSjMbgMINLyvbWkMyUcJVlQxuhjncT1lZKRsL81ROP/QiwV3uYycmwG+De",
	"lJrNTGzcYSlMqFED1rHSjw5XkMMP/LCleL+ieLef2o8jea73PmocR7epa+F2ncKsU+5lx+Yz6skg1qRv",
	"J5mHJR3gRNPzPf19yV3aUJ+bS9FLvKWyn1rbcfrezvZk3p291M24wr9k5kjS8RqOso0X8POSrnlsdRTy",
	"g9PRXDI6wrnNeRMejBQV6+Knu6miWGl8yK+zLOObCVDtHv8UaColes+CiVfxx056aJPPDzx1PXk81h7a",
	"Zft/AAAA//+oqQLm0QcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

