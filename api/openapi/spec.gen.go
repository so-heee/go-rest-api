// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXX2/cRBD/KquFx+v5kgAPfuq1SasrVRslQTxUUbXxTc5bbK+7u256ik6idyAVQQW8",
	"FCFeEEIIgUT5JyTUii9jpZRvgWbXPvts38VpK8rTxbs7M7+d3/5mJsfUE2EsIoi0ou4xlaBiESkwH4NI",
	"g4xYsAvyDsgtKYXEZU9EGiKNf7I4DrjHNBeRc0uJCNeU50PI8K/XJRxSl77mFDEcu6ucfsytw8lk0qFD",
	"UJ7kMfqh7jwusYFJfrCT+Tbg5g7cYxpLEYPU3MKGfHlV/MKnhNsJlzCk7o3MdL9D9TgG6lJxcAs8TScd",
	"2k+0D5HOLrsDtxNQuh47YiHgb2avtOTRCO1jptSRkMOGzQoG46Jk0AaNJa0Oh3keKHVTi/cgaoQl4VCC",
	"8lecMDs37fJp0BfCVZ0vuGq61BI6PTFsTqkhyxzhGkJ1GuO7yUFG+jw2k5KN8TsEpdioxQ0NmOJ80zXm",
	"cWo3WR4F6ZYsBA2ycfcOC5IW6AonuclqqHtHAA2PmJtXeihkyDR1KY/0W2/QuTmPNIzAphHu6ka8iQJ5",
	"s6Wbyh1484t/R4F8AaQh40Ej0iWCbQ9qm2nPX1oPzhr3tELRDEEo/Z8haChVJsTKioWlG7xEcj3eRTla",
	"aBeASZBYy/DrwHxdyrm88u4ezQo+erK7Bbe+1rHtHXDXdotN4Rmvi73kEo+GJBQSCI8OBfFBIuJEBpkP",
	"5ToO3GVhHEDXEyHeHw/mfY55JqVgs0hVEsdC6vNlizyTtL89INmBhRCu4xwdHXVLNk5+rNb6+kT5QmpS",
	"WiXikPS3B13aoQH3IKvzecyYeT6Q9W6vKSQzu10hR05mqpyrg4tb13a3zq13e11fh4HVsQzV9UNst9yD",
	"wkcZsjnjIAFcB3hm1+whNKw2IJW9wVq31+2hUxFDxGJOXbrR7XU3zAPRvqHIESzR/rpT6z4jW44Wc5JO",
	"v0mnj9Lp43T6Zzq7n86e4Ofst/TeT0+/+v3pw58xNfjkTTMcDKlLd6zjvulHe1n7mVdHRd0b1SAZFJL3",
	"Ko6LtxOQ44Lgaj8rpKBlAp3S5FOVzX5ncbJa7/Ve3iTVPAs0zFXX37ZKTMKQyXGRJmLzREyiMJmajZTp",
	"dgFHePtolXM25yoWqoms2XeGoD/S2ZOTzx6k799LZ58b4h7h+uyj9N6P6fR+Ov342Q8Pnn3/pM5d6T6Q",
	"JRmUviCG40rKwiTQPGZSO9gAzg2ZZs+fNVs9JxNb4v5/VJWzspQijf1cOcfmdzCcLJfU7IN0+q0h5P7T",
	"2YcnX/9y8unDk7++qJFxGbQZEi6MB5unSchEJXyYqwflXognw9RGNsVo8KK6yQpYPiqs5SMLvSL8iGwK",
	"0wvyWWUNa3+bSdKOTfVuPGkq5zwaBUCMCQnFEEzBfdPeoynI/L5O079fi4/iMmhis34wJoPN8ruwTyF7",
	"F3hF1U6z9jX8/eXjfz75tfYacNAwg9gqWTYxUuIh66S3hB+dH+HHYhMtEVPMIVTvXtteZ+ElOum0lFp1",
	"LmogB7NCtCCeBCw1deGv1VN1cWerv7e1uTDRGCmUZ5kb+/hwC5oumgCEkQiOCAIrE2W5KfHkHOPPavVW",
	"+VquXgzXRrwmGcu0awG9UuluzMHscM9nckh2hOGslWLNoz2TYNEi1+tZuEZJGtuaInOizRzk+W1oteNN",
	"XYZon+nwFZD6nMKvCvxsUi7/l/U8Wu69JC0bIMtFbFxhuW6i46rwWEDsfnVcD3DPF0q7G71ez7mzRjFu",
	"5r+G3Db9OZXZEDDpVA9mg50WBrFaJF+tNNizDWSxfys62Z/8GwAA//863S7fNBQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
