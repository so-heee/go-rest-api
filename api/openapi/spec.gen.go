// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXT2/cRBT/KqOB43a9SYCDT902abWlaqMkiEMVVRPvy3qK7XFnxk1X0Up0F6QiqIBL",
	"EeKCEEIIJMo/IaFWfBkrpXwL9Gbstdf2bpwUqZw2npn39/d+770cU0+EsYgg0oq6x1SCikWkwHwMIg0y",
	"YsEuyHsgt6QUEo89EWmINP7J4jjgHtNcRM4dJSI8U54PIcO/XpdwSF36mlPYcOytcvoxtwonk0mHDkF5",
	"kseoh7pzu8QaJvnDTqbbODdX4B7TWIoYpObWbciPV9kvdEq4m3AJQ+reykT3O1SPY6AuFQd3wNN00qH9",
	"RPsQ6SzYHbibgNJ12xELAX8zeaUlj0YoHzOljoQcNlxWfDAqSgJtvLGg1d1hngdK3dbiPYga3ZJwKEH5",
	"K16Ym9v2+DTXF8xVlS+oagpqCZyeGDan1IBlnnANoToN8d3kIAN9bptJycb4HYJSbNQiQuNM8b4pjLmd",
	"WiTLrSDckoWgQTbe3mNB0sK7QkkustrVvSOAhiLmpkoPhQyZpi7lkX7rDToX55GGEdg0wn3d6G+iQN5u",
	"qaYSA2+u+HcUyJfwNGQ8aPR0CWHbO7XNtOeftR80UX6pAaH0Uv1njescjciYWNmPsDGDl0iux7tINuva",
	"JWASJHYq/DowX1dypK69u0ezdo6a7G2BnK91bCcD3LezYFN4RuvipLjCoyEJhQTCo0NBfJDocSKDTIdy",
	"HQfuszAOoOuJEOPHh/kUY55JKdgsUpXEsZD6YlkizyTtbw9I9mDBhOs4R0dH3ZKMkz+rDbY+Ub6QmpRO",
	"iTgk/e1Bl3ZowD3IunhuM2aeD2S922syycxtV8iRk4kq5/rg8taN3a0L691e19dhYFkqQ3XzEIcp96DQ",
	"UXbZvHEQAK4DfLNr7tA17CUglY1grdvr9lCpiCFiMacu3ej2uhumQLRvIHIES7S/7tRmy8g2m8WcpNNv",
	"0umTdPo0nf6Zzh6ms2f4OfstffDT869+f/74Z0wNlrwZdYMhdemOVdw302YvGy7z3qeoe6tqJHOF5JOI",
	"4+HdBOS4ALg6rQoqaJlAp7TXVGmz31ncm9Z7vf9uT2qe9A1b0823LROTMGRyXKSJ2DwRkyhMpmYjZWZZ",
	"wNG9fZTKMZtjFQvVBNbsOwPQH+ns2clnj9L3H6Szzw1wT/B89lH64Md0+jCdfvzih0cvvn9Wx64UD2RJ",
	"BqUvieG4krIwCTSPmdQOtvcLQ6bZ+bNmu+dkYlvc/w+qclaWQqRxWivn2PwOhpPllJp9kE6/NYA8fD77",
	"8OTrX04+fXzy1xc1MK6CNivApfFg8zQKGauED3P2IN0L8mQ+taFNMfhfljdZA8sXgbV8IaHXhB+RTWFm",
	"Qb6JrGHvb7Mn2qVoUp9yTe2cR6MAiBEhoRiCabhv2jiajMzjdZr+uVosiqugic36wZgMNst1YUshqwsM",
	"UbXjrK2Gv798+s8nv9aqARcNs2atomUTIiUcskl6R/jRxRF+LA7REjDFHkL17o3tdRZeoZNOS6pV96IG",
	"cDArRAviScBWUyf+Wj1Vl3e2+ntbmxUcLhsNhJEIjghaLiNhk18CwjnGn9X0rAKynJ5org07TbTLyGkd",
	"eqXc3Jg7s8M9n8kh2REGlFaUNFV5JkaiRE7I0npqMldeTG/tY6SLnDOyNcrlQJtFx/PbwGr3lzrPUD4j",
	"2isA9ZzMrjL4bFwt/5N0HrL22pLVWFrOUlML2HCb8n1deCwg9r66cAd45wul3Y1er+fcW6OYzUx/zTU7",
	"tudYZWN80qk+zFYzLYzHahFdtVJgz46AxQms6GR/8m8AAAD//6e2rWbUEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
