// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWX2/bNhD/KgS3R9dykm0PeqrbpIW7og2SFHsogoKhLhY7iVTJU1wj0HcfjpRsWaJT",
	"Ox3QJ5si7//97nePXJqyMho0Op4+cguuMtqBPyw0gtWiuAb7APbCWmPpszQaQSP9FVVVKClQGZ18dUbT",
	"NydzKAX9+93CPU/5b8nWRhJuXTKvVFDYNM2EZ+CkVRXp4enGLguGWfdw0ur2zm0UpI+8sqYCiyq4Dd3n",
	"p+xvdVr4VisLGU8/t6K3E47rCnjKzd1XkMibCZ/XmIPGNtgr+FaDw7FtLUqg31beoVV6SfKVcG5lbBa5",
	"HPjgVfQEDvEmFG3sjpASnPuC5l/QP7a88zpmdk/CpcniQft0+icKoXQ/qsl1fdeWZWNbWCvWdC7BObGE",
	"Hwfhndm+j4WxsTOKZL8VKogVJSDY6O2DKOoDvNsq6USedvVmBRBpM+X76N7YUiBPudL41x98I640whJC",
	"GuE7Rv2tHdgvB6oZxKDiPfnJgf0JT0uhiqineyB1uFOXAmV+LGJjoNxrwDjcq//YuJ4xKryJJycGjU6Q",
	"tVW4viawBddegbBgaZbQ6c6f3nSVevfPDW8HLmkKt9vK5YhVmN3wPUzrcyO91t1Z/kbpjJXGAlP63rAc",
	"LHlc26LV4dIkge+irAqYSlNS/PSw4xkhfUohZJG7uqqMxZd9iS6TfH65YO2DHRNpkqxWq2lPJumejahn",
	"zlxuLLLeV2bu2fxyMeUTXigJ7ZztbFZC5sBOp7OYSeFvp8Yuk1bUJe8Xry8+XF+8OJ3OpjmWRUCpLd3H",
	"e6I7JWGro++yf5NQARQW9Oba35FrNEvAuhDByXQ2nZFSU4EWleIpP5vOpme+QTD3JUqMqDFPhuxQmdDA",
	"uyn55CBjaJgFtAoegImiYCjsEpA5WJY0wtm9sUyCRaE0E1KaWiNTGeWMsOBZapFRvrbERX1gA2pemWw9",
	"2CzKukBVCYsJzY4XmUBxxHIRJeumCfjpbTins9n/t9HEOTmy33z8OyCyLkth14OssJXCnGEOTGSl0sz5",
	"HYgyiWLpPMMVipy9JR0JEkG45NH/LrKGvFxCpIxXgLXVjgnmlF4WwDy1sNJkUIzK9BbQX79aL855j/rI",
	"/lCxt8xUxgm5PPVdtgVl6xfvDy60NUx6WR3xze1PlqnFTcc/Jx0P8ncm1+zc+BHUEeAJjZxD1pPAxc14",
	"uMamyDjHzYT/GeKIGdnEm8S27t12eQvIQtbv1mxx3u+N0A5tb1CIbj+wX1ugfhNMw4p59h62ARFbe7Ef",
	"qbFS9ArQTu6vJtcvl3TYHdq9imx5j+P1h8tTUb7hzeRA9A15OFIVSgcNMunj5uNZcBLJ0dXF/ObifFCA",
	"Ueb6JQhZ71UgeaSfo7BJOvdDk24PQaYPeB8wg0+/FJdnG2eulMyFzdiV8XU5CI6+MY9CYy+r/Y3IZ66/",
	"C32+pUh38eZlR3Drau25VeYR8qyy0ClxfJFQe/MLKvlMRA+RexxG+8v4c0A6OxSk3tJ+dPoGoAkby/d7",
	"I0XRUu9wsSvoLjcO07PZbJY8nHDKZqt/5Frg6k2tWu5uJsOHc7+LUeSfvIc71XVPCtyEmb9LuY43t81/",
	"AQAA//+YRXk93hEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

