// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX34/bxBP/V1b7/T6mce4OeMhT094VpVTt6e4QD9Wp2nPm4i22191dN41OlmgMUhFU",
	"wANFiBeEAKGCKL8EQq34Z6wr5b9As2snTuzkfFekIp4Se3dnPjOf/cyMj6grgkiEEGpFu0dUgopEqMA8",
	"9EMNMmT+LsjbILekFBJfuyLUEGr8y6LI5y7TXITOTSVCfKdcDwKG//4v4ZB26f+cmQ/HriqnF3FrMEmS",
	"Fh2AciWP0A7tTv0S65gUG1u5bQNuaqB7RCMpIpCaW9hQvF7lf2ZTwq2YSxjQ7vX86H6L6nEEtEvFwU1w",
	"NU1atBdrD0KdB7sDt2JQuuo7ZAHgb35eacnDIZ6PmFIjIQc1iwsYjInSgSZoLGlVOMx1QakbWrwJ4cme",
	"53bXuV2ScFcM6oM26TRbuIZAncTJbnyQ0zL1zaRkY3wOQCk2hJODMGBm++vCmPqpRLLcCxIiWQAaZO3q",
	"bebHDdDNjBRHVkPdGwHUXDNu7tGhkAHTtEt5qF95iU6P81DDEGwa4Y6uxRsrkDcamlmIgdffydcVyOdA",
	"GjDu1yJdIqnmoLaZdr3TKrZOlEsdCKWX2j9tXGcoFcbFyoqBpRPcWHI93kWxWWgXgEmQWEvw6cA8XSqY",
	"uvzGHs0LLlqyqzPmPK0jW7vhjq3Wm8I1Vudr+SUeDkggJBAeHgrigUTEsfRzG6rrOHCHBZEPbVcEGD9u",
	"LPoMc01KwWaRqjiKhNTnyyeKTNLedp/kG+ZcdB1nNBq1S2ecYlul9fSI8oTUpPSWiEPS2+63aYv63IW8",
	"zhY+I+Z6QNbbnTqXzKy2hRw6+VHlXOlf3Lq6u3Vuvd1pezrwrUploK4dYrvjLsxslCGbPQ4SwLWPe3bN",
	"GkLDWgJS2QjW2p12B42KCEIWcdqlG+1Oe8NcEO0ZihzBYu05i91haEvNfEay9GGWfpyl32Vpmk1+y9Kv",
	"svRelj7JJo+y9Ofs7vfHHzw4/uMTTA9ee9OQ+gPapa+C3oFDCcrbMw5KFVTR7vVFPxYM0fleju9uxSDH",
	"M4Ln8JaVoGUMrdLgsaia/db8YLPe6fxzg0x9K64Za669ZoUYBwGTY5shkqeImBxhEjUbKtPHfI7Y9rEg",
	"CFVLzNeGhl+z9Mnxh/ezt+5m6UfZ5PcsfYTv03ezu99mk3vZ5L1nD+8/++ZJlaESdMjzCUpfEIPxQnaC",
	"2Nc8YlI7WMjPDZhmZ0+QrZNJYovZv4+VclZqCUlahYCkJe9GMyFNvkDNTB4bjuYk9PSzX54++KFKUH45",
	"esZ8IxXliFbKqED9n9FRoSGbpxVSQuY0TlTKOTK//UGyovC9nU2+NFK69zR95/jzH22lqyt0Zky7MO5v",
	"nsSP8Ur4oKAGS/KMmRxTE05mw9nzkpI3mWJYWyuGRnpZeCHZFKZfF9PiGvbnJrO8HVyT6iRS13J5OPSB",
	"mCMkEAMwTfFlG0edk2m8Tt0narXI2qwfjEl/s3wv7FXI7wWGaKI6udra2/Dnp4//ev+nym3AYdCMwqsK",
	"ah0jJR7yaeem8MLzQ3yYH3RKxMxmRap3r26vs+ASTVoNJbc4u9aQg1khWhBXAjaJasleq6bq4s5Wb29r",
	"c4GHi8YCYSSEEUHPZSZs8ktEOEf4s1qei4Qslye6a6JOE+0ycVpAL1SbG1MwO9z1mByQHWFIaSRJcytP",
	"pUg8UQiy9AlhMlf+eLi+j5HOa86crUiuINoMo67XhFbbHKs6w/O50F4AqWdU9qKCT6fV8ofsWcTaaSpW",
	"42m5Ss1dwIJbl+8rwmU+seuLH0U+rnlC6e5Gp9Nxbq9RzGZuvwLNtu0pV3kbT1qLG3vFp4NBrObZVSsP",
	"7NkWMN+BFU32k78DAAD///LaLeQaFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

