// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4xTzW7zNhB8FWLboz7JTosedKpRp4WLog1q5BQYAUOtJabiT5crO4ahdy+W/k2cAL3Y",
	"kjg7O5yd3YMJLgaPnhPUe0imQ6fz42NCkv9IISKxxfzVNvK7DuQ0Qw3W808/QgG8i3h4xRYJxgK8dijQ",
	"40lisr6FcSyA8N/BEjZQPwnd6lwdXl7RMIwCwjdG8rqfB5P7NpgM2cg2eKjhV+sb5QKhsn4dVIeEUMBA",
	"PdTQMcdUVxW+aRd7LE1wokeAQmSCZ21YHtFpKxVpiDEQ/3xdcboAzB4W6gh416Kuqu12W17VVCfYWHyQ",
	"O1OpC8Tq6qsKazV7WJRQQG8N+pTNOvWM2nSo7srJZy11Pi0DtdWxNFV/LH65/3N5/+2unJQdu140MJJL",
	"f62XSBtr8MJxLTljKhmg5V4wy3wm0qCADVI63GBaTsqJkIaIXkcLNfxQTrO+qLnLI6qGhJSqvfwtmlE+",
	"tci3w/sbeSCflFbJ+rZHJUlTLjTYQ25AWpCLBmr4DVlO02PmzN1IO2SkBPXTR2bprKzArLyKsssghxPF",
	"JX9MAxbHzF9l9ZzicSXoFIN4LIC7yeSUIfT5ajrG3posuHpNomJ/RXi0+rQ407OY30Pn1TxgTiajy+zf",
	"E66hhu+qy05Wx4Ws8jaOn67KTdZuXBVUGpzTtDt4qrJTLzu1mEsCWbdiZ7YowSqzJjQDWd5lm3W0z/+g",
	"PK/GYn/APeuBO6nakmWsD7Xil27qE9FKeGjz+bTmuME+RIee1QF1s8MNbsqULfx2QOTQbqYgKt6zLVm3",
	"1rdfMSVu/y/TA4VmMHlJvyDT0X5Btjqb+ZF1ZgympDjkwaT3uUwwrsb/AgAA///dotw/jAUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

