// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RV32/bNhD+Vwhuj5qkJMMe9DSnaQt3xVo0CfZQGANDnS12EqkeT3aMQP/7cKQcy7ay",
	"pgiGPikO78fH77v7+CC1a1pnwZKXxYP0uoJGhT9nHVVgyWhFxtlP8LUDT3zQomsByUAIs6oB/tK2BVlI",
	"T2jsSvaJbJX3G4flxGGfSISvnUEoZfE5lhglLJJdgrv7Apq42jEa3zrr4RQOuX/AfrtlDJtqdLMBmLim",
	"CfdYOmwUyUIaS7/9Kh/TjSVYAXI+wT1N8tF5wL+fWeYIrZnm5NYDvgDpE8o9p3efSA+6Q0Pba56Y2PkS",
	"FAKyUvzrLvx6s8Px7q8bmcT54krxdI+rImplz4XhngCtqq+cDlVL8BpNy7LLQr4xthSNQxDGLp2oAHl0",
	"OqyHGr7IMrhXTVtDql3D9+RALqSdJaWDONAowxm+a1uH9Ps4Y0eMnH2ciyHgoEWRZZvNJh3lZLuwPjmC",
	"OxO+ckhi9F/hlmL2cZ7KRNZGwzDFu56t0hWI8zSfaqnCaepwlQ2pPns/f/X6z+vXv5yneVpRU8cZxMZ/",
	"WF4Dro2GfY0x5BCTsQCGao65DmcMTSZyDejjDc7SPM25qGvBqtbIQl6keXoRFpaqIFGmBs1bFy3ikIRb",
	"D6UgJxAIDaxBqLoWpHAFJDysGjYfsXQoNCApY4XS2nWWhCmZJR7usPXzkhnaGwErj9GXLl253WkMNmBQ",
	"bVsPdpF98c7u7Y3/+hlhKQv5U7b3v2wwv2za+fo+rkZ0nnDv8zz/35oOBheaHtL54Y+4gF3TKNweUSI2",
	"hipBFQhVNsYKD7gGZBpJrTwvtK4Ng11wjYzY7Xz2EL7zsmeUK5jQ8BNQh9YLJbyxqxpE8EnRuBLqE43e",
	"AoXjy+38KswJqgYIkPsfFw6dhSklL6oswlDtd3DAJceeRNhBMmL1xDwXL5RpWJOdmZ7tTF2+c5UVVy44",
	"zs7Nz9hhCBr/LYHjw9KfeumUaZxyfCj5WyARmbvbivnVWN8o6aAvw/TZA3++S11+Wp4Wl0+foy23fVLa",
	"iOlHKzuAeVT2uWqGt/e7xBxROn4/A23jl/Pzgq95KHUg8kTpIC4LHcrxnk+J8N5pVQ8+cPyo1HxWOU/F",
	"RZ7n2fpMcu+h/nGhV9E4HjkbjKRPjgNnWoP37Pi3AeGB5P4/E27i8B7uv5f9ov83AAD//yjYn52qCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

