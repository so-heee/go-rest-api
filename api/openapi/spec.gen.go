// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW32/bNhD+Vwhuj67lJNse9FS3SQt3RRvECfZQBAUjnS1mEqkeT3GMQP/7cKRky5ac",
	"OOuAPdkUyfvx3X3f8UkmtiitAUNOxk8SwZXWOPCLmSFAo/I54APgBaJF/pxYQ2CI/6qyzHWiSFsT3Ttr",
	"+JtLMigU//sVYSFj+Uu09RGFXRdNSx0M1nU9kim4BHXJdmS88SuCY9EeHDW2fXAbA/GTLNGWgKRD2NB+",
	"fs7/1ibCj0ojpDL+1ly9HUlalyBjae/uISFZj+S0ogwMNclewY8KHPV9G1UA/zb3HaE2S75fKudWFtOB",
	"zb0YvInOhWOiCUXrh6OSBJz7TvZvMC973jk95PYA4IlNh5P2cPojmqBwL9VkXt01Zdn4VohqzesCnFNL",
	"eDkJH8z2/FAaGz+9TA574YKgKoAAB3cfVF4dEd3WSHvl+VCvVwADbaZ9Hy0sFopkLLWhP36Tm+vaECwh",
	"wAiPNBhv5QC/H2lmLwc93JM3DvAnIi2UzgcjPUCp44O6tI4OEva1bv8Fk72LZwnNygZJhZrWc+ZCCO0d",
	"KARkqvPqzq8+tEB++utaNnrIlsLuFtiMqAzSCo9BTM9t4q3uSu0HbVJRWAShzcKKDJAjrjBvbLg4iuBR",
	"FWUO48QWnD8fbMeASjykEFCUripLi/S2e6NFUk4vZ6I5sOMijqLVajXu3InaY73JMBUus0ii81XYhZhe",
	"zsZyJHOdQCODrc9SJRmI0/FkyKXyu2OLy6i56qLPs/cXX+YXb07Hk3FGRR5IhIX7uuBppBPY2uiG7M9E",
	"XABNOZ+Z+z0OjakO6EIGJ+PJeMJGbQlGlVrG8mw8GZ/5BqHMlyiyqqIs2hfv0oYG3oXkxkEqyAoEQg0P",
	"IFSeC1K4BBIOlgUrrFhYFAkgKW2EShJbGRI6ZcyYC36IzFLGaztXuA8wsOadTdd7g7+octKlQoqY2m9S",
	"ReoVs39wltZ14E/nAXI6mfx3D47hkTnw/Pj6Z2BkVRQK13uoiJWmTFAGQqWFNsL5JwojSWrp/ADKNQd7",
	"yzYiYv120ZP/naU1R7mEgTJeAVVonFDCabPMQXjlF4VNIe+V6SOQ3363np3LzmRi//uGvWehU8nMlbHv",
	"si0pm7hkV7gIKxh1UO2Ng9ufLFPDm3Y8nLRjSn6ymRHn1ktQO59OWHKOeT2EUVn3xXVIRfoY1yP5e8hj",
	"yMkm32joUbzbLh+BRED9bi1m593eCO3Q9Aan6A4T+z0C95sSBlbCD9f9NuDB1mwcZupQKToFaJT73mbm",
	"7ZIXu6Ldqch27kmaf7k8VcUHWY+OZN/+HB6oCsPBQpb4vGVfC04GMLq6mF5fnO8VYAi5tgIB9E4Boif+",
	"eRU12eRhZvLuMcT0+R7iZYjpf6Xl2SaYK51kClNxZX1ZjmKjh/1VZOyg2n0QeeS6T6Fvt5zpLt08lj22",
	"bWrtzTFdh+rw2SYqb3R8/5WQ815mHcVnk8kkejiR7Lux32vGIPwb2JpBUI/2D079YOdev/ER7lTdPXvh",
	"OgjIrn47Wd/W/wQAAP//GQ/E5coPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

