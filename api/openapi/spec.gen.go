// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVTW/cNhD9KwTboyLKdtGDTrXjJNg0aILYRg+BEdDU7IqpRCrD0a4Xhv57MZTWq9XK",
	"jdMccpLXnI/H92YeH6TxdeMdOAoyf5DBlFDr+Od5SyU4skaT9e4jfG0hEB806BtAshDDnK6Bv7RtQOYy",
	"EFq3kl0iGx3CxmMxc9glEuFraxEKmX/qS4wSbpNdgr/7Aoa42hRNaLwLcAxHGwMhfCb/D7hvdz6Inmt7",
	"vQGYubSNt1p6rDXJXFpHv/8mH9OtI1gBcj7BPc2y0wbAz88sMwFt5xm6CYA/gPQJHZ/Tu0tkANOipe0V",
	"z0/f+QI0ArJu/Osu/nq9w/H272uZ9NPGlfrTPa6SqJEdF4Z7AnS6uvQmVi0gGLQND4HM5WvrClF7BGHd",
	"0osSkAepxWqoEXKl4F7XTQWp8TXfkwO5kPGOtIniQK0tZ4S2aTzSH+OMHTHy/MNCDAEHLXKlNptNOspR",
	"u7AumcA9F6H0SGL0X+GX4vzDIpWJrKyBYaZ3PRttShCnaTbXUsfT1ONKDalBvVu8fPXX1asXp2mWllRX",
	"/QxiHd4vrwDX1sC+xhhyjFEsgKWKY67iGUOTiVwDhv4GJ2mWZlzUN+B0Y2Uuz9IsPYvrS2WUSHndUqmm",
	"m9j43j4OKbkJUAjyAoHQwhqEripBGldAIsCqZmMSS4/CAJK2TmhjfOtI2II541GPjrAomK+9SfAcYO9Z",
	"F77Y7hQHFzHUbUW20UiKN+NFoUnv3Y//+hVhKXP5i9rboxq8Uc0bY9f1u9IbUyTiNMsmfXXTVEOe+hK8",
	"+/9NB/+LTQ8Zff9nv5FtXWvcTlgRG0uloBKELmrrRABcAzKTpFeBN9xUlsHecg1FbH9BPcTvougY5Qpm",
	"ZPwI1KILQotg3aoCEY1T1L6A6kimN0Dx+GK7uIyDg7oGAuT+08Kxs7CF5M2VeZyy/VIOuOTYpAhbSEas",
	"Hrnp7Q/KNOzNzl1Pdi4v3/rSiUsfLWhn7ydsOQR1+JbA/UvTHZvrnIscc3wo+Rsg0TN3txWLy7G+vaSD",
	"vgwzqAf+fJe6/NY8LS6fPkdbbvuktD2mn63sAOZR2eeqGR/j7xJzROn4QY20jZ/ST7d8zUOpI5FHSkdx",
	"WehYjvd8ToR33uhq8IHpK1PxWekD5WdZlqn1ieTeQ/1poZe9cTxyNhhJl0wDz+PDwKZ/ExEeSB7+M+G6",
	"H97D/Q+yu+3+DQAA//+Pse9XyQoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

