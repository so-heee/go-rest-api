openapi: 3.0.3
info:
  title: Sample API
  description: A short description of API.
  termsOfService: http://example.com/terms/
  contact:
    name: API support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1
    description: Local server

tags:
  - name: client
    description: Client
  - name: users
    description: Access to Users
  - name: tweets
    description: Access to Tweets


paths:

  /users:
    post:
      tags: 
        - users
      summary: Create a new User.
      description: Create a new User
      operationId: PostUser
      parameters: []
      requestBody:
        description: user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPostRequest'
            example:
              name: John Doe
              mail: john@gmail.com
              password: tSNP2amF
      responses:
        '201':
          description: CREATED

  /users/{userId}:
    get:
      tags:
        - users
      summary: Get User by ID.
      description: Returns a single User model
      operationId: GetUserByID
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A single User model
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
                example:
                  id: 3
                  name: Richard Roe

    patch:
      tags:
        - users
      summary: Patch User.
      description: Update a User
      operationId: PatchUser
      parameters:
        - name: userId
          in: path
          description: user id
          required: true
          schema:
            type: integer
      requestBody:
        description: user to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatchRequest'
            example:
              name: John Doe
      responses:
        '200':
          description: CREATED

  /tweets/{tweetId}:
    get:
      tags:
        - tweets
      summary: Get tweet by ID.
      description: Returns a single Tweet model
      operationId: GetTweetByID
      parameters:
        - name: tweetId
          in: path
          description: tweet id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single Tweet model
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Tweet'
                example:
                  id: 1
                  text: John Doe
                  user_id: 1
        '500':
          $ref: '#/components/responses/InternalServerError'

  /oauth/access_token:
    post:
      summary: Authenticate with the admin server.
      description: Used to retrieve all target segments for certain account id.
      operationId: Authenticate
      tags:
        - client
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'

components:
  schemas:

    ApiError:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/SubError'

    SubError:
      type: object
      required:
        - parameter
        - value
        - message
      properties:
        parameter:
          type: string
        value:
          type: string
        message:
          type: string

    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer 
          format: int64
        name:
          type: string
        mail:
          type: string

    Tweet:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        user_id:
          type: integer
          format: int64

    UserPostRequest:
      type: object
      required:
        - name
        - mail
        - password
      properties:
        name:
          type: string
        mail:
          type: string
        password:
          type: string

    UserPatchRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    AuthenticationRequest:
      type: object
      required:
        - name
        - password
      properties:
        name:
          type: string
        password:
          type: string

    AuthenticationResponse:
      type: object
      properties:
        access_token:
          type: string
      required:
        - access_token

  responses:
    BadRequest:
      description: "BadRequest – The request was invalid or cannot be served"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
    Forbidden:
      description: "Forbidden – The server understood the request, but is refusing it or the access is not allowed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
    NotFound:
      description: "NotFound – There is no resource behind the URI"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
    InternalServerError:
      description: "Internal Server Error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# security: 
#   # Non-OAuth setting
#   - api_key: []
#   # OAuth setting
#   - users_auth:
#     - write:users
#     - read:users


externalDocs:
  description: Find more info here
  url: https://example.com
